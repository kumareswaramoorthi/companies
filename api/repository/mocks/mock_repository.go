// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
        reflect "reflect"

        gin "github.com/gin-gonic/gin"
        gomock "github.com/golang/mock/gomock"
        models "github.com/kumareswaramoorthi/companies/api/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
        ctrl     *gomock.Controller
        recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
        mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
        mock := &MockRepository{ctrl: ctrl}
        mock.recorder = &MockRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
        return m.recorder
}

// CheckCompanyExistsByID mocks base method.
func (m *MockRepository) CheckCompanyExistsByID(c *gin.Context, id string) (bool, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CheckCompanyExistsByID", c, id)
        ret0, _ := ret[0].(bool)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CheckCompanyExistsByID indicates an expected call of CheckCompanyExistsByID.
func (mr *MockRepositoryMockRecorder) CheckCompanyExistsByID(c, id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCompanyExistsByID", reflect.TypeOf((*MockRepository)(nil).CheckCompanyExistsByID), c, id)
}

// CheckCompanyExistsByName mocks base method.
func (m *MockRepository) CheckCompanyExistsByName(c *gin.Context, name string) (bool, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CheckCompanyExistsByName", c, name)
        ret0, _ := ret[0].(bool)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CheckCompanyExistsByName indicates an expected call of CheckCompanyExistsByName.
func (mr *MockRepositoryMockRecorder) CheckCompanyExistsByName(c, name interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCompanyExistsByName", reflect.TypeOf((*MockRepository)(nil).CheckCompanyExistsByName), c, name)
}

// CreateCompany mocks base method.
func (m *MockRepository) CreateCompany(c *gin.Context, company models.Company) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateCompany", c, company)
        ret0, _ := ret[0].(error)
        return ret0
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockRepositoryMockRecorder) CreateCompany(c, company interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockRepository)(nil).CreateCompany), c, company)
}

// DeleteCompany mocks base method.
func (m *MockRepository) DeleteCompany(c *gin.Context, id string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteCompany", c, id)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockRepositoryMockRecorder) DeleteCompany(c, id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockRepository)(nil).DeleteCompany), c, id)
}

// GetCompany mocks base method.
func (m *MockRepository) GetCompany(c *gin.Context, id string) (models.Company, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetCompany", c, id)
        ret0, _ := ret[0].(models.Company)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockRepositoryMockRecorder) GetCompany(c, id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockRepository)(nil).GetCompany), c, id)
}

// UpdateCompany mocks base method.
func (m *MockRepository) UpdateCompany(c *gin.Context, updateFields map[string]interface{}, id string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateCompany", c, updateFields, id)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockRepositoryMockRecorder) UpdateCompany(c, updateFields, id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockRepository)(nil).UpdateCompany), c, updateFields, id)
}