// Code generated by MockGen. DO NOT EDIT.
// Source: company.go

// Package mocks is a generated GoMock package.
package mocks

import (
        reflect "reflect"

        gin "github.com/gin-gonic/gin"
        gomock "github.com/golang/mock/gomock"
        errors "github.com/kumareswaramoorthi/companies/api/errors"
        models "github.com/kumareswaramoorthi/companies/api/models"
)

// MockCompany is a mock of Company interface.
type MockCompany struct {
        ctrl     *gomock.Controller
        recorder *MockCompanyMockRecorder
}

// MockCompanyMockRecorder is the mock recorder for MockCompany.
type MockCompanyMockRecorder struct {
        mock *MockCompany
}

// NewMockCompany creates a new mock instance.
func NewMockCompany(ctrl *gomock.Controller) *MockCompany {
        mock := &MockCompany{ctrl: ctrl}
        mock.recorder = &MockCompanyMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompany) EXPECT() *MockCompanyMockRecorder {
        return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompany) CreateCompany(c *gin.Context, company models.Company) (models.Company, *errors.ErrorResponse) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateCompany", c, company)
        ret0, _ := ret[0].(models.Company)
        ret1, _ := ret[1].(*errors.ErrorResponse)
        return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyMockRecorder) CreateCompany(c, company interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompany)(nil).CreateCompany), c, company)
}

// DeleteCompany mocks base method.
func (m *MockCompany) DeleteCompany(c *gin.Context, id string) *errors.ErrorResponse {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteCompany", c, id)
        ret0, _ := ret[0].(*errors.ErrorResponse)
        return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockCompanyMockRecorder) DeleteCompany(c, id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockCompany)(nil).DeleteCompany), c, id)
}

// GetCompany mocks base method.
func (m *MockCompany) GetCompany(c *gin.Context, id string) (models.Company, *errors.ErrorResponse) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetCompany", c, id)
        ret0, _ := ret[0].(models.Company)
        ret1, _ := ret[1].(*errors.ErrorResponse)
        return ret0, ret1
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockCompanyMockRecorder) GetCompany(c, id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockCompany)(nil).GetCompany), c, id)
}

// UpdateCompany mocks base method.
func (m *MockCompany) UpdateCompany(c *gin.Context, id string, updateReq map[string]interface{}) (models.Company, *errors.ErrorResponse) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateCompany", c, id, updateReq)
        ret0, _ := ret[0].(models.Company)
        ret1, _ := ret[1].(*errors.ErrorResponse)
        return ret0, ret1
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockCompanyMockRecorder) UpdateCompany(c, id, updateReq interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockCompany)(nil).UpdateCompany), c, id, updateReq)
}